/*! For license information please see parakeet.min.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./lib/AdInterests.ts":(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AdInterests = void 0;\nclass AdInterests {\n    constructor(other) {\n        if (other) {\n            if (typeof other.origin === \'string\') {\n                this.origin = new URL(other.origin);\n            }\n            else {\n                this.origin = (!!other.origin && other.origin instanceof URL) ? other.origin : new URL("about:blank");\n            }\n            this.business = other.business;\n            this.interests = Array.isArray(other.interests) ? other.interests.slice() : [];\n            this.representations = Array.isArray(other.representations) ? other.representations.slice() : [];\n            this.readers = other.readers;\n        }\n        else {\n            this.origin = new URL("about:blank");\n            this.business = "";\n            this.interests = [];\n            this.representations = [];\n            this.readers = [];\n        }\n    }\n}\nexports.AdInterests = AdInterests;\nAdInterests.prototype.origin = URL.prototype;\nAdInterests.prototype.business = "";\nAdInterests.prototype.interests = [];\nAdInterests.prototype.representations = [];\nAdInterests.prototype.readers = [];\n\n\n//# sourceURL=webpack:///./lib/AdInterests.ts?')},"./lib/AdProperties.ts":(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AdProperties = void 0;\nclass AdProperties {\n    constructor(other) {\n        if (other) {\n            this.orientation = other.orientation;\n            this.size = other.size;\n            this.slot = other.slot;\n            this.lang = other.lang;\n            this.adtype = other.adtype;\n        }\n        else {\n            this.orientation = "";\n            this.size = "";\n            this.slot = "";\n            this.lang = "";\n            this.adtype = "";\n        }\n    }\n}\nexports.AdProperties = AdProperties;\nAdProperties.prototype.orientation = "";\nAdProperties.prototype.size = "";\nAdProperties.prototype.slot = "";\nAdProperties.prototype.lang = "";\nAdProperties.prototype.adtype = "";\n\n\n//# sourceURL=webpack:///./lib/AdProperties.ts?')},"./lib/AdRequestConfig.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AdRequestConfig = void 0;\nconst AdProperties_1 = __webpack_require__(/*! ./AdProperties */ "./lib/AdProperties.ts");\nconst AdTargeting_1 = __webpack_require__(/*! ./AdTargeting */ "./lib/AdTargeting.ts");\nclass AdRequestConfig {\n    constructor(other) {\n        this.joinedGroups = {};\n        if (other) {\n            this.proxiedAnonymizingOrigin = other.proxiedAnonymizingOrigin;\n            this.adProperties = new AdProperties_1.AdProperties(other.adProperties);\n            this.publisherCode = other.publisherCode;\n            this.publisherAdUnit = other.publisherAdUnit;\n            this.targeting = new AdTargeting_1.AdTargeting(other.targeting);\n            this.anonymizedProxiedSignals = Array.isArray(other.anonymizedProxiedSignals) ? other.anonymizedProxiedSignals.slice() : [];\n            if (typeof other.fallbackSource === \'string\') {\n                this.fallbackSource = new URL(other.fallbackSource);\n            }\n            else {\n                this.fallbackSource = (!!other.fallbackSource && other.fallbackSource instanceof URL) ? other.fallbackSource : new URL("about:blank");\n            }\n        }\n        else {\n            this.proxiedAnonymizingOrigin = "";\n            this.adProperties = new AdProperties_1.AdProperties();\n            this.publisherCode = "";\n            this.publisherAdUnit = "";\n            this.targeting = new AdTargeting_1.AdTargeting();\n            this.anonymizedProxiedSignals = [];\n            this.fallbackSource = new URL("about:blank");\n        }\n    }\n    toRequestBody() {\n        return JSON.stringify(this);\n    }\n}\nexports.AdRequestConfig = AdRequestConfig;\nAdRequestConfig.prototype.proxiedAnonymizingOrigin = "";\nAdRequestConfig.prototype.adProperties = AdProperties_1.AdProperties.prototype;\nAdRequestConfig.prototype.publisherCode = "";\nAdRequestConfig.prototype.publisherAdUnit = "";\nAdRequestConfig.prototype.targeting = AdTargeting_1.AdTargeting.prototype;\nAdRequestConfig.prototype.anonymizedProxiedSignals = [];\nAdRequestConfig.prototype.fallbackSource = URL.prototype;\n\n\n//# sourceURL=webpack:///./lib/AdRequestConfig.ts?')},"./lib/AdTargeting.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AdTargeting = void 0;\nconst Geo_1 = __webpack_require__(/*! ./Geo */ "./lib/Geo.ts");\nclass AdTargeting {\n    constructor(other) {\n        if (other) {\n            this.interests = Array.isArray(other.interests) ? other.interests.slice() : [];\n            this.geolocation = new Geo_1.Geo(other.geolocation);\n        }\n        else {\n            this.interests = [];\n            this.geolocation = new Geo_1.Geo();\n        }\n    }\n}\nexports.AdTargeting = AdTargeting;\nAdTargeting.prototype.interests = [];\nAdTargeting.prototype.geolocation = Geo_1.Geo.prototype;\n\n\n//# sourceURL=webpack:///./lib/AdTargeting.ts?')},"./lib/Geo.ts":(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Geo = void 0;\nclass Geo {\n    constructor(other) {\n        if (other) {\n            this.lat = other.lat;\n            this.lon = other.lon;\n        }\n        else {\n            this.lat = undefined;\n            this.lon = undefined;\n        }\n    }\n}\nexports.Geo = Geo;\nGeo.prototype.lat = undefined;\nGeo.prototype.lon = undefined;\n\n\n//# sourceURL=webpack:///./lib/Geo.ts?')},"./lib/InterestGroups.ts":(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.GetInterestGroups = exports.StoreInterestGroup = void 0;\nfunction StoreInterestGroup(parsedInterests, duration, secureOrigin) {\n    const rawStoredInterests = localStorage.getItem("storedInterests");\n    let storedInterests = JSON.parse(rawStoredInterests ? rawStoredInterests : "{}");\n    if (!storedInterests) {\n        throw new TypeError("Error retrieving stored interests. Clear localStorage.");\n    }\n    if (!storedInterests[secureOrigin]) {\n        storedInterests[secureOrigin] = {};\n    }\n    if (parsedInterests.business) {\n        storedInterests[secureOrigin]["business"] = parsedInterests.business;\n    }\n    if (!storedInterests[secureOrigin]["interests"]) {\n        storedInterests[secureOrigin]["interests"] = {};\n    }\n    parsedInterests.interests.forEach(function (interest) {\n        if (!storedInterests[secureOrigin]["interests"][interest]) {\n            storedInterests[secureOrigin]["interests"][interest] = {};\n        }\n        storedInterests[secureOrigin]["interests"][interest].expiration = (new Date().getTime() / 1000) + duration;\n        if (!storedInterests[secureOrigin]["interests"][interest].readers) {\n            storedInterests[secureOrigin]["interests"][interest].readers = [];\n        }\n        parsedInterests.readers.forEach(function (reader) {\n            if (!storedInterests[secureOrigin]["interests"][interest].readers.includes(reader)) {\n                storedInterests[secureOrigin]["interests"][interest].readers.push(reader);\n            }\n        });\n    });\n    localStorage.storedInterests = JSON.stringify(storedInterests);\n}\nexports.StoreInterestGroup = StoreInterestGroup;\nfunction GetInterestGroups() {\n    const rawStoredInterests = localStorage.getItem("storedInterests");\n    const storedInterests = JSON.parse(rawStoredInterests ? rawStoredInterests : "{}");\n    if (!storedInterests) {\n        throw new TypeError("Error retrieving stored interests. Clear localStorage.");\n    }\n    let joinedInterests = {};\n    const currentTimeInSeconds = (new Date().getTime() / 1000);\n    Object.keys(storedInterests).forEach(function (namespacedInterestGroup) {\n        Object.keys(storedInterests[namespacedInterestGroup]["interests"]).forEach(function (interest) {\n            if (storedInterests[namespacedInterestGroup]["interests"][interest].expiration > currentTimeInSeconds) {\n                Object.keys(storedInterests[namespacedInterestGroup]["interests"][interest].readers).forEach(function (reader) {\n                    const readerName = storedInterests[namespacedInterestGroup]["interests"][interest].readers[reader];\n                    if (!joinedInterests[readerName]) {\n                        joinedInterests[readerName] = {};\n                    }\n                    if (!joinedInterests[readerName]["interests"]) {\n                        joinedInterests[readerName]["interests"] = {};\n                    }\n                    if (!joinedInterests[readerName]["interests"][namespacedInterestGroup]) {\n                        joinedInterests[readerName]["interests"][namespacedInterestGroup] = [];\n                    }\n                    joinedInterests[readerName]["interests"][namespacedInterestGroup].push(interest);\n                });\n            }\n        });\n    });\n    return joinedInterests;\n}\nexports.GetInterestGroups = GetInterestGroups;\n\n\n//# sourceURL=webpack:///./lib/InterestGroups.ts?')},"./lib/ParakeetHelpers.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.RemotelyStoreInterestGroup = exports.RemotelyRequestAd = exports.Parakeet = exports.ShouldReturnBlob = exports.HasStorageOrigin = exports.ShouldServeAds = void 0;\nlet serveAds = true;\nlet storageOrigin = null;\nlet remoteFrame = null;\nconst remoteChannel = new MessageChannel();\nlet sendingPort = null;\nlet outstandingPromises = new Array();\nlet returnBlob = false;\nconst AdRequestConfig_1 = __webpack_require__(/*! ./AdRequestConfig */ "./lib/AdRequestConfig.ts");\nconst AdInterests_1 = __webpack_require__(/*! ./AdInterests */ "./lib/AdInterests.ts");\nconst InterestGroups_1 = __webpack_require__(/*! ./InterestGroups */ "./lib/InterestGroups.ts");\nfunction ShouldServeAds() {\n    return serveAds;\n}\nexports.ShouldServeAds = ShouldServeAds;\nfunction HasStorageOrigin() {\n    return (!!storageOrigin && storageOrigin instanceof URL);\n}\nexports.HasStorageOrigin = HasStorageOrigin;\nfunction ShouldReturnBlob() {\n    return returnBlob;\n}\nexports.ShouldReturnBlob = ShouldReturnBlob;\nclass Parakeet {\n    constructor() {\n        this.receivingPort = null;\n        this.clientOrigin = "";\n    }\n    SetServeAds(newState) {\n        serveAds = !!newState;\n    }\n    SetStorageOrigin(origin) {\n        if (remoteFrame instanceof HTMLIFrameElement) {\n            throw new TypeError("Unable to change StorageOrigin if the remote storage has been used already.");\n        }\n        storageOrigin = (!!origin && origin instanceof URL) ? origin : null;\n    }\n    ListenAsRemoteStorage() {\n        if (HasStorageOrigin()) {\n            throw new TypeError("Unable to act as remote storage if StorageOrigin is set.");\n        }\n        returnBlob = true;\n        window.addEventListener(\'message\', event => {\n            if (this.receivingPort instanceof MessagePort) {\n                return;\n            }\n            if ((event.data == "Initialize") && (event.ports[0] instanceof MessagePort)) {\n                this.receivingPort = event.ports[0];\n                this.clientOrigin = event.origin;\n                this.receivingPort.onmessage = this.ServerOnMessage.bind(this);\n                this.receivingPort.start();\n            }\n        }, false);\n    }\n    ServerOnMessage(message) {\n        if (this.receivingPort instanceof MessagePort) {\n            try {\n                if (message.data.type == "StoreInterestGroup") {\n                    const parsedInterests = new AdInterests_1.AdInterests(JSON.parse(message.data.interests));\n                    const duration = message.data.duration;\n                    InterestGroups_1.StoreInterestGroup(parsedInterests, duration, this.clientOrigin);\n                    this.receivingPort.postMessage({ result: "OK", data: undefined });\n                }\n                else if (message.data.type == "RequestAd") {\n                    const parsedConfig = new AdRequestConfig_1.AdRequestConfig(JSON.parse(message.data.config));\n                    const port = this.receivingPort;\n                    navigator.createAdRequest(parsedConfig).then(adUrl => {\n                        port.postMessage({ result: "OK", data: adUrl });\n                    }).catch(e => {\n                        port.postMessage({ result: "Error", data: e });\n                    });\n                }\n            }\n            catch (e) {\n                this.receivingPort.postMessage({ result: "Error", data: e });\n            }\n        }\n    }\n}\nexports.Parakeet = Parakeet;\nfunction ClientOnMessage(message) {\n    const outstandingPromise = outstandingPromises.shift();\n    if (!outstandingPromise || !outstandingPromise.resolver || !outstandingPromise.rejecter) {\n        return;\n    }\n    if (message.data.data instanceof Blob) {\n        message.data.data = new URL(URL.createObjectURL(message.data.data));\n    }\n    (message.data.result == "OK") ? outstandingPromise.resolver(message.data.data) : outstandingPromise.rejecter(message.data.data);\n}\nfunction EnsureRemoteStorageFrame() {\n    const creationPromise = new Promise(function (resolve, reject) {\n        if (!storageOrigin) {\n            return reject(new TypeError(\'No PARAKEET StorageOrigin configured.\'));\n        }\n        if (remoteFrame instanceof HTMLIFrameElement) {\n            return resolve(undefined);\n        }\n        remoteFrame = document.createElement(\'iframe\');\n        remoteFrame.sandbox.add(\'allow-same-origin\');\n        remoteFrame.sandbox.add(\'allow-scripts\');\n        remoteFrame.height = "0px";\n        remoteFrame.width = "0px";\n        remoteFrame.style.display = "none";\n        remoteFrame.addEventListener(\'load\', () => {\n            var _a;\n            if (!storageOrigin) {\n                return reject(new TypeError(\'No PARAKEET StorageOrigin configured.\'));\n            }\n            (_a = remoteFrame === null || remoteFrame === void 0 ? void 0 : remoteFrame.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(\'Initialize\', storageOrigin.toString(), [remoteChannel.port2]);\n            sendingPort = remoteChannel.port1;\n            sendingPort.onmessage = ClientOnMessage;\n            sendingPort.start();\n            resolve(undefined);\n        }, false);\n        remoteFrame.addEventListener(\'error\', () => {\n            reject(new TypeError(\'Unable to load remote StorageOrigin "\' + storageOrigin + \'".\'));\n        }, false);\n        remoteFrame.src = storageOrigin.toString();\n        document.body.appendChild(remoteFrame);\n    });\n    return creationPromise;\n}\nfunction RemotelyRequestAd(config) {\n    const creationPromise = new Promise(function (resolve, reject) {\n        EnsureRemoteStorageFrame().then(() => {\n            if (sendingPort instanceof MessagePort) {\n                outstandingPromises.push({ resolver: resolve, rejecter: reject });\n                sendingPort.postMessage({\n                    type: "RequestAd",\n                    config: JSON.stringify(config)\n                });\n            }\n            else {\n                reject(new TypeError(\'Unable to communicate with remote StorageOrigin.\'));\n            }\n        }).catch(e => {\n            reject(e);\n        });\n    });\n    return creationPromise;\n}\nexports.RemotelyRequestAd = RemotelyRequestAd;\nfunction RemotelyStoreInterestGroup(parsedInterests, duration) {\n    const creationPromise = new Promise(function (resolve, reject) {\n        EnsureRemoteStorageFrame().then(() => {\n            if (sendingPort instanceof MessagePort) {\n                outstandingPromises.push({ resolver: resolve, rejecter: reject });\n                sendingPort.postMessage({\n                    type: "StoreInterestGroup",\n                    interests: JSON.stringify(parsedInterests),\n                    duration: duration\n                });\n            }\n            else {\n                reject(new TypeError(\'Unable to communicate with remote StorageOrigin.\'));\n            }\n        }).catch(e => {\n            reject(e);\n        });\n    });\n    return creationPromise;\n}\nexports.RemotelyStoreInterestGroup = RemotelyStoreInterestGroup;\n\n\n//# sourceURL=webpack:///./lib/ParakeetHelpers.ts?')},"./parakeet.polyfill.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SetStorageOrigin = void 0;\nconst endpoint = "https://edge.microsoft.com/.well-known/ad-bundles";\nconst ParakeetHelpers_1 = __webpack_require__(/*! ./lib/ParakeetHelpers */ "./lib/ParakeetHelpers.ts");\nconst AdProperties_1 = __webpack_require__(/*! ./lib/AdProperties */ "./lib/AdProperties.ts");\nconst AdTargeting_1 = __webpack_require__(/*! ./lib/AdTargeting */ "./lib/AdTargeting.ts");\nconst AdRequestConfig_1 = __webpack_require__(/*! ./lib/AdRequestConfig */ "./lib/AdRequestConfig.ts");\nconst Geo_1 = __webpack_require__(/*! ./lib/Geo */ "./lib/Geo.ts");\nconst AdInterests_1 = __webpack_require__(/*! ./lib/AdInterests */ "./lib/AdInterests.ts");\nconst InterestGroups_1 = __webpack_require__(/*! ./lib/InterestGroups */ "./lib/InterestGroups.ts");\nfunction SetStorageOrigin(origin) {\n}\nexports.SetStorageOrigin = SetStorageOrigin;\nif (!globalThis.AdProperties) {\n    globalThis.AdProperties = AdProperties_1.AdProperties;\n}\nif (!globalThis.AdTargeting) {\n    globalThis.AdTargeting = AdTargeting_1.AdTargeting;\n}\nif (!globalThis.Geo) {\n    globalThis.Geo = Geo_1.Geo;\n}\nif (!globalThis.AdRequestConfig) {\n    globalThis.AdRequestConfig = AdRequestConfig_1.AdRequestConfig;\n}\nif (!globalThis.AdInterests) {\n    globalThis.AdInterests = AdInterests_1.AdInterests;\n}\nif (!globalThis.Parakeet) {\n    globalThis.Parakeet = new ParakeetHelpers_1.Parakeet();\n}\nif (!Navigator.prototype.createAdRequest) {\n    Navigator.prototype.createAdRequest = function (config) {\n        const creationPromise = new Promise(function (resolve, reject) {\n            try {\n                if (typeof (config) === \'string\') {\n                    config = JSON.parse(config);\n                }\n                let parsedConfig = new AdRequestConfig_1.AdRequestConfig(config);\n                if (ParakeetHelpers_1.HasStorageOrigin()) {\n                    ParakeetHelpers_1.RemotelyRequestAd(parsedConfig).then(adUrl => {\n                        resolve(adUrl);\n                    }).catch(e => {\n                        reject(e);\n                    });\n                }\n                else {\n                    try {\n                        parsedConfig.joinedGroups = {};\n                        parsedConfig.joinedGroups = InterestGroups_1.GetInterestGroups();\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                    fetch(endpoint, {\n                        method: "POST",\n                        credentials: "omit",\n                        headers: { "Content-Type": "application/json" },\n                        body: parsedConfig.toRequestBody()\n                    }).then(response => {\n                        if (ParakeetHelpers_1.ShouldServeAds()) {\n                            response.blob().then(responseBlob => {\n                                return resolve(ParakeetHelpers_1.ShouldReturnBlob() ? responseBlob : new URL(URL.createObjectURL(responseBlob)));\n                            }).catch(e => {\n                                reject(e);\n                            });\n                        }\n                        else {\n                            response.json().then(responseData => {\n                                return resolve(responseData);\n                            }).catch(e => {\n                                reject(e);\n                            });\n                        }\n                    }).catch(e => {\n                        reject(e);\n                    });\n                }\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        return creationPromise;\n    };\n}\nif (!Navigator.prototype.joinParakeetInterestGroup) {\n    Navigator.prototype.joinParakeetInterestGroup = function (interests, duration) {\n        const creationPromise = new Promise(function (resolve, reject) {\n            try {\n                if (typeof (duration) !== \'number\' || duration <= 0) {\n                    throw new TypeError("Duration must be a number > 0.");\n                }\n                if (typeof (interests) === \'string\') {\n                    interests = JSON.parse(interests);\n                }\n                const parsedInterests = new AdInterests_1.AdInterests(interests);\n                if (ParakeetHelpers_1.HasStorageOrigin()) {\n                    ParakeetHelpers_1.RemotelyStoreInterestGroup(interests, duration).then(() => {\n                        resolve(undefined);\n                    }).catch(e => {\n                        reject(e);\n                    });\n                }\n                else {\n                    InterestGroups_1.StoreInterestGroup(parsedInterests, duration, window.origin);\n                    resolve(undefined);\n                }\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        return creationPromise;\n    };\n}\n\n\n//# sourceURL=webpack:///./parakeet.polyfill.ts?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}var __webpack_exports__=__webpack_require__("./parakeet.polyfill.ts")})();